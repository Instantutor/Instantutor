"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBundleGroupId = getBundleGroupId;
exports.assertSignalNotAborted = assertSignalNotAborted;
exports.registerCoreWithSerializer = registerCoreWithSerializer;
exports.getPublicId = getPublicId;
exports.optionsProxy = optionsProxy;
exports.hashFromOption = hashFromOption;
exports.BuildAbortError = void 0;

function _baseX() {
  const data = _interopRequireDefault(require("base-x"));

  _baseX = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _serializer() {
  const data = require("./serializer");

  _serializer = function () {
    return data;
  };

  return data;
}

function _AssetGraph() {
  const data = _interopRequireDefault(require("./AssetGraph"));

  _AssetGraph = function () {
    return data;
  };

  return data;
}

function _BundleGraph() {
  const data = _interopRequireDefault(require("./BundleGraph"));

  _BundleGraph = function () {
    return data;
  };

  return data;
}

function _Graph() {
  const data = _interopRequireDefault(require("./Graph"));

  _Graph = function () {
    return data;
  };

  return data;
}

function _ParcelConfig() {
  const data = _interopRequireDefault(require("./ParcelConfig"));

  _ParcelConfig = function () {
    return data;
  };

  return data;
}

function _RequestTracker() {
  const data = require("./RequestTracker");

  _RequestTracker = function () {
    return data;
  };

  return data;
}

function _Config() {
  const data = _interopRequireDefault(require("./public/Config"));

  _Config = function () {
    return data;
  };

  return data;
}

function _package() {
  const data = _interopRequireDefault(require("../package.json"));

  _package = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const base62 = (0, _baseX().default)('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');

function getBundleGroupId(bundleGroup) {
  return 'bundle_group:' + bundleGroup.entryAssetId;
}

function assertSignalNotAborted(signal) {
  if (signal && signal.aborted) {
    throw new BuildAbortError();
  }
}

class BuildAbortError extends Error {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'BuildAbortError');
  }

}

exports.BuildAbortError = BuildAbortError;
let coreRegistered;

function registerCoreWithSerializer() {
  if (coreRegistered) {
    return;
  }

  const packageVersion = _package().default.version;

  if (typeof packageVersion !== 'string') {
    throw new Error('Expected package version to be a string');
  } // $FlowFixMe


  for (let [name, ctor] of Object.entries({
    AssetGraph: _AssetGraph().default,
    Config: _Config().default,
    BundleGraph: _BundleGraph().default,
    Graph: _Graph().default,
    ParcelConfig: _ParcelConfig().default,
    RequestGraph: _RequestTracker().RequestGraph
  })) {
    (0, _serializer().registerSerializableClass)(packageVersion + ':' + name, ctor);
  }

  coreRegistered = true;
}

function getPublicId(id, alreadyExists) {
  let encoded = base62.encode(Buffer.from(id, 'hex'));

  for (let end = 5; end <= encoded.length; end++) {
    let candidate = encoded.slice(0, end);

    if (!alreadyExists(candidate)) {
      return candidate;
    }
  }

  throw new Error('Original id was not unique');
} // These options don't affect compilation and should cause invalidations


const ignoreOptions = new Set(['env', // handled by separate invalidateOnEnvChange
'inputFS', 'outputFS', 'workerFarm', 'packageManager', 'detailedReport', 'shouldDisableCache', 'cacheDir', 'shouldAutoInstall', 'logLevel', 'shouldProfile', 'shouldPatchConsole', 'projectRoot', 'additionalReporters']);

function optionsProxy(options, invalidateOnOptionChange) {
  return new Proxy(options, {
    get(target, prop) {
      if (!ignoreOptions.has(prop)) {
        invalidateOnOptionChange(prop);
      }

      return target[prop];
    }

  });
}

function hashFromOption(value) {
  if (typeof value === 'object' && value != null) {
    return (0, _utils().hashObject)(value);
  }

  return String(value);
}