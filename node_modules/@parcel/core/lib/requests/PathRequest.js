"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPathRequest;
exports.ResolverRunner = void 0;

function _diagnostic() {
  const data = _interopRequireWildcard(require("@parcel/diagnostic"));

  _diagnostic = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = require("@parcel/logger");

  _logger = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _url() {
  const data = _interopRequireDefault(require("url"));

  _url = function () {
    return data;
  };

  return data;
}

function _querystring() {
  const data = _interopRequireDefault(require("querystring"));

  _querystring = function () {
    return data;
  };

  return data;
}

function _ReporterRunner() {
  const data = require("../ReporterRunner");

  _ReporterRunner = function () {
    return data;
  };

  return data;
}

function _Dependency() {
  const data = _interopRequireDefault(require("../public/Dependency"));

  _Dependency = function () {
    return data;
  };

  return data;
}

function _PluginOptions() {
  const data = _interopRequireDefault(require("../public/PluginOptions"));

  _PluginOptions = function () {
    return data;
  };

  return data;
}

function _ParcelConfig() {
  const data = _interopRequireDefault(require("../ParcelConfig"));

  _ParcelConfig = function () {
    return data;
  };

  return data;
}

function _ParcelConfigRequest() {
  const data = _interopRequireWildcard(require("./ParcelConfigRequest"));

  _ParcelConfigRequest = function () {
    return data;
  };

  return data;
}

function _types() {
  const data = require("../types");

  _types = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const type = 'path_request';
const QUERY_PARAMS_REGEX = /^([^\t\r\n\v\f?]*)(\?.*)?/;

function createPathRequest(input) {
  return {
    id: input.dependency.id + ':' + input.name,
    type,
    run,
    input
  };
}

async function run({
  input,
  api,
  options
}) {
  let configResult = (0, _nullthrows().default)(await api.runRequest((0, _ParcelConfigRequest().default)()));
  let config = (0, _ParcelConfigRequest().getCachedParcelConfig)(configResult, options);
  let resolverRunner = new ResolverRunner({
    options,
    config
  });
  let result = await resolverRunner.resolve(input.dependency);

  if (result != null) {
    if (result.invalidateOnFileCreate) {
      for (let file of result.invalidateOnFileCreate) {
        api.invalidateOnFileCreate(file);
      }
    }

    if (result.invalidateOnFileChange) {
      for (let filePath of result.invalidateOnFileChange) {
        api.invalidateOnFileUpdate(filePath);
        api.invalidateOnFileDelete(filePath);
      }
    }

    api.invalidateOnFileDelete(result.assetGroup.filePath);
    return result.assetGroup;
  }
}

class ResolverRunner {
  constructor({
    config,
    options
  }) {
    _defineProperty(this, "config", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "pluginOptions", void 0);

    this.config = config;
    this.options = options;
    this.pluginOptions = new (_PluginOptions().default)(this.options);
  }

  async getThrowableDiagnostic(dependency, message) {
    let diagnostic = {
      message,
      origin: '@parcel/core'
    };

    if (dependency.loc && dependency.sourcePath != null) {
      diagnostic.filePath = dependency.sourcePath;
      diagnostic.codeFrame = {
        code: await this.options.inputFS.readFile(dependency.sourcePath, 'utf8'),
        codeHighlights: dependency.loc ? [{
          start: dependency.loc.start,
          end: dependency.loc.end
        }] : []
      };
    }

    return new (_diagnostic().default)({
      diagnostic
    });
  }

  async resolve(dependency) {
    var _dependency$resolveFr;

    let dep = new (_Dependency().default)(dependency);
    (0, _ReporterRunner().report)({
      type: 'buildProgress',
      phase: 'resolving',
      dependency: dep
    });
    let resolvers = await this.config.getResolvers();
    let pipeline;
    let filePath;
    let query;
    let validPipelines = new Set(this.config.getNamedPipelines());

    if ( // Don't consider absolute paths. Absolute paths are only supported for entries,
    // and include e.g. `C:\` on Windows, conflicting with pipelines.
    !_path().default.isAbsolute(dependency.specifier) && dependency.specifier.includes(':')) {
      if (dependency.specifier.startsWith('node:')) {
        filePath = dependency.specifier;
      } else {
        [pipeline, filePath] = dependency.specifier.split(':');

        if (!validPipelines.has(pipeline)) {
          if (dep.specifierType === 'url') {
            // This may be a url protocol or scheme rather than a pipeline, such as
            // `url('http://example.com/foo.png')`
            return null;
          } else {
            throw await this.getThrowableDiagnostic(dependency, (0, _diagnostic().md)`Unknown pipeline: ${pipeline}.`);
          }
        }
      }
    } else {
      if (dep.specifierType === 'url' && dependency.specifier.startsWith('//')) {
        // A protocol-relative URL, e.g `url('//example.com/foo.png')`
        return null;
      }

      filePath = dependency.specifier;
    }

    let queryPart = null;

    if (dep.specifierType === 'url') {
      let parsed = _url().default.parse(filePath);

      if (typeof parsed.pathname !== 'string') {
        throw await this.getThrowableDiagnostic(dependency, (0, _diagnostic().md)`Received URL without a pathname ${filePath}.`);
      }

      filePath = decodeURIComponent(parsed.pathname);

      if (parsed.query != null) {
        queryPart = parsed.query;
      }
    } else {
      let matchesQuerystring = filePath.match(QUERY_PARAMS_REGEX);

      if (matchesQuerystring && matchesQuerystring[2] != null) {
        filePath = matchesQuerystring[1];
        queryPart = matchesQuerystring[2].substr(1);
      }
    }

    if (queryPart != null) {
      query = _querystring().default.parse(queryPart);
    }

    let diagnostics = [];

    for (let resolver of resolvers) {
      try {
        let result = await resolver.plugin.resolve({
          filePath,
          pipeline,
          dependency: dep,
          options: this.pluginOptions,
          logger: new (_logger().PluginLogger)({
            origin: resolver.name
          })
        });

        if (result) {
          if (result.meta) {
            dependency.meta = { ...dependency.meta,
              ...result.meta
            };
          }

          if (result.priority != null) {
            dependency.priority = _types().Priority[result.priority];
          }

          if (result.isExcluded) {
            return null;
          }

          if (result.filePath != null) {
            var _pipeline;

            return {
              assetGroup: {
                canDefer: result.canDefer,
                filePath: result.filePath,
                query,
                sideEffects: result.sideEffects,
                code: result.code,
                env: dependency.env,
                pipeline: result.pipeline === undefined ? (_pipeline = pipeline) !== null && _pipeline !== void 0 ? _pipeline : dependency.pipeline : result.pipeline,
                isURL: dep.specifierType === 'url'
              },
              invalidateOnFileCreate: result.invalidateOnFileCreate,
              invalidateOnFileChange: result.invalidateOnFileChange
            };
          }

          if (result.diagnostics) {
            let errorDiagnostic = (0, _diagnostic().errorToDiagnostic)(new (_diagnostic().default)({
              diagnostic: result.diagnostics
            }), {
              origin: resolver.name,
              filePath
            });
            diagnostics.push(...errorDiagnostic);
          }
        }
      } catch (e) {
        // Add error to error map, we'll append these to the standard error if we can't resolve the asset
        let errorDiagnostic = (0, _diagnostic().errorToDiagnostic)(e, {
          origin: resolver.name,
          filePath
        });

        if (Array.isArray(errorDiagnostic)) {
          diagnostics.push(...errorDiagnostic);
        } else {
          diagnostics.push(errorDiagnostic);
        }

        break;
      }
    }

    if (dep.isOptional) {
      return null;
    }

    let resolveFrom = (_dependency$resolveFr = dependency.resolveFrom) !== null && _dependency$resolveFr !== void 0 ? _dependency$resolveFr : dependency.sourcePath;
    let dir = resolveFrom != null ? (0, _utils().relativePath)(this.options.projectRoot, resolveFrom) : ''; // $FlowFixMe because of the err.code assignment

    let err = await this.getThrowableDiagnostic(dependency, (0, _diagnostic().md)`Failed to resolve '${dependency.specifier}' ${dir ? `from '${dir}'` : ''}`); // Merge diagnostics

    err.diagnostics.push(...diagnostics);
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  }

}

exports.ResolverRunner = ResolverRunner;