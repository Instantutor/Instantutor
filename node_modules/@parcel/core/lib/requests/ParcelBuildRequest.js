"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createParcelBuildRequest;

function _AssetGraphRequest() {
  const data = _interopRequireDefault(require("./AssetGraphRequest"));

  _AssetGraphRequest = function () {
    return data;
  };

  return data;
}

function _BundleGraphRequest() {
  const data = _interopRequireDefault(require("./BundleGraphRequest"));

  _BundleGraphRequest = function () {
    return data;
  };

  return data;
}

function _WriteBundlesRequest() {
  const data = _interopRequireDefault(require("./WriteBundlesRequest"));

  _WriteBundlesRequest = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("../utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _dumpGraphToGraphViz() {
  const data = _interopRequireDefault(require("../dumpGraphToGraphViz"));

  _dumpGraphToGraphViz = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createParcelBuildRequest(input) {
  return {
    type: 'parcel_build_request',
    id: 'parcel_build_request',
    run,
    input
  };
}

async function run({
  input,
  api,
  options
}) {
  let {
    optionsRef,
    requestedAssetIds,
    signal
  } = input;
  let request = (0, _AssetGraphRequest().default)({
    name: 'Main',
    entries: options.entries,
    optionsRef,
    shouldBuildLazily: options.shouldBuildLazily,
    requestedAssetIds
  });
  let {
    assetGraph,
    changedAssets,
    assetRequests
  } = await api.runRequest(request, {
    force: options.shouldBuildLazily && requestedAssetIds.size > 0
  });
  let bundleGraphRequest = (0, _BundleGraphRequest().default)({
    assetGraph,
    optionsRef
  });
  let bundleGraph = await api.runRequest(bundleGraphRequest); // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381 (Windows only)

  (0, _dumpGraphToGraphViz().default)(bundleGraph._graph, 'BundleGraph');
  let writeBundlesRequest = (0, _WriteBundlesRequest().default)({
    bundleGraph,
    optionsRef
  });
  let bundleInfo = await api.runRequest(writeBundlesRequest);
  (0, _utils().assertSignalNotAborted)(signal);
  return {
    bundleGraph,
    bundleInfo,
    changedAssets,
    assetRequests
  };
}