"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createBundleGraphRequest;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = require("@parcel/logger");

  _logger = function () {
    return data;
  };

  return data;
}

function _diagnostic() {
  const data = _interopRequireWildcard(require("@parcel/diagnostic"));

  _diagnostic = function () {
    return data;
  };

  return data;
}

function _AssetGraph() {
  const data = _interopRequireDefault(require("../AssetGraph"));

  _AssetGraph = function () {
    return data;
  };

  return data;
}

function _BundleGraph() {
  const data = _interopRequireDefault(require("../public/BundleGraph"));

  _BundleGraph = function () {
    return data;
  };

  return data;
}

function _BundleGraph2() {
  const data = _interopRequireDefault(require("../BundleGraph"));

  _BundleGraph2 = function () {
    return data;
  };

  return data;
}

function _MutableBundleGraph() {
  const data = _interopRequireDefault(require("../public/MutableBundleGraph"));

  _MutableBundleGraph = function () {
    return data;
  };

  return data;
}

function _Bundle() {
  const data = require("../public/Bundle");

  _Bundle = function () {
    return data;
  };

  return data;
}

function _ReporterRunner() {
  const data = require("../ReporterRunner");

  _ReporterRunner = function () {
    return data;
  };

  return data;
}

function _dumpGraphToGraphViz() {
  const data = _interopRequireDefault(require("../dumpGraphToGraphViz"));

  _dumpGraphToGraphViz = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _hash() {
  const data = require("@parcel/hash");

  _hash = function () {
    return data;
  };

  return data;
}

function _PluginOptions() {
  const data = _interopRequireDefault(require("../public/PluginOptions"));

  _PluginOptions = function () {
    return data;
  };

  return data;
}

function _applyRuntimes() {
  const data = _interopRequireDefault(require("../applyRuntimes"));

  _applyRuntimes = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _utils2() {
  const data = require("../utils");

  _utils2 = function () {
    return data;
  };

  return data;
}

function _ParcelConfigRequest() {
  const data = _interopRequireWildcard(require("./ParcelConfigRequest"));

  _ParcelConfigRequest = function () {
    return data;
  };

  return data;
}

function _DevDepRequest() {
  const data = require("./DevDepRequest");

  _DevDepRequest = function () {
    return data;
  };

  return data;
}

function _assetUtils() {
  const data = require("../assetUtils");

  _assetUtils = function () {
    return data;
  };

  return data;
}

function _InternalConfig() {
  const data = require("../InternalConfig");

  _InternalConfig = function () {
    return data;
  };

  return data;
}

function _ConfigRequest() {
  const data = require("./ConfigRequest");

  _ConfigRequest = function () {
    return data;
  };

  return data;
}

function _serializer() {
  const data = require("../serializer");

  _serializer = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createBundleGraphRequest(input) {
  return {
    type: 'bundle_graph_request',
    id: 'BundleGraph:' + input.assetGraph.getHash(),
    run: async input => {
      let configResult = (0, _nullthrows().default)(await input.api.runRequest((0, _ParcelConfigRequest().default)()));
      let parcelConfig = (0, _ParcelConfigRequest().getCachedParcelConfig)(configResult, input.options);
      let {
        devDeps,
        invalidDevDeps
      } = await (0, _DevDepRequest().getDevDepRequests)(input.api);
      (0, _DevDepRequest().invalidateDevDeps)(invalidDevDeps, input.options, parcelConfig);
      let builder = new BundlerRunner(input, parcelConfig, devDeps);
      return builder.bundle(input.input.assetGraph);
    },
    input
  };
}

class BundlerRunner {
  constructor({
    input,
    api,
    options
  }, config, previousDevDeps) {
    _defineProperty(this, "options", void 0);

    _defineProperty(this, "optionsRef", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "pluginOptions", void 0);

    _defineProperty(this, "api", void 0);

    _defineProperty(this, "previousDevDeps", void 0);

    _defineProperty(this, "devDepRequests", void 0);

    _defineProperty(this, "configs", void 0);

    this.options = options;
    this.api = api;
    this.optionsRef = input.optionsRef;
    this.config = config;
    this.previousDevDeps = previousDevDeps;
    this.devDepRequests = new Map();
    this.configs = new Map();
    this.pluginOptions = new (_PluginOptions().default)((0, _utils2().optionsProxy)(this.options, api.invalidateOnOptionChange));
  }

  async loadConfigs() {
    // Load all configs up front so we can use them in the cache key
    let bundler = await this.config.getBundler();
    await this.loadConfig(bundler);
    let namers = await this.config.getNamers();

    for (let namer of namers) {
      await this.loadConfig(namer);
    }

    let runtimes = await this.config.getRuntimes();

    for (let runtime of runtimes) {
      await this.loadConfig(runtime);
    }
  }

  async loadConfig(plugin) {
    let config = (0, _InternalConfig().createConfig)({
      plugin: plugin.name,
      searchPath: _path().default.join(this.options.projectRoot, 'index')
    });
    await (0, _ConfigRequest().loadPluginConfig)(plugin, config, this.options);
    await (0, _ConfigRequest().runConfigRequest)(this.api, config);

    for (let devDep of config.devDeps) {
      let devDepRequest = await (0, _DevDepRequest().createDevDependency)(devDep, plugin, this.previousDevDeps, this.options);
      await this.runDevDepRequest(devDepRequest);
    }

    this.configs.set(plugin.name, config);
  }

  async runDevDepRequest(devDepRequest) {
    let {
      specifier,
      resolveFrom
    } = devDepRequest;
    this.devDepRequests.set(`${specifier}:${resolveFrom}`, devDepRequest);
    await (0, _DevDepRequest().runDevDepRequest)(this.api, devDepRequest);
  }

  async bundle(graph) {
    (0, _ReporterRunner().report)({
      type: 'buildProgress',
      phase: 'bundling'
    });
    await this.loadConfigs();
    let plugin = await this.config.getBundler();
    let {
      plugin: bundler,
      name,
      resolveFrom
    } = plugin;
    let cacheKey = await this.getCacheKey(graph); // Check if the cacheKey matches the one already stored in the graph.
    // This can save time deserializing from cache if the graph is already in memory.
    // This will only happen in watch mode. In this case, serialization will occur once
    // when sending the bundle graph to workers, and again on shutdown when writing to cache.

    let previousResult = await this.api.getPreviousResult(cacheKey);

    if (previousResult != null) {
      // No need to call api.storeResult here because it's already the request result.
      return previousResult;
    } // Otherwise, check the cache in case the cache key has already been written to disk.


    if (!this.options.shouldDisableCache) {
      let cached = await this.options.cache.getBuffer(cacheKey);

      if (cached != null) {
        // Deserialize, and store the original buffer in an in memory cache so we avoid
        // re-serializing it when sending to workers, and in build mode, when writing to cache on shutdown.
        let graph = (0, _serializer().deserializeToCache)(cached);
        this.api.storeResult(graph, cacheKey);
        return graph;
      }
    }

    let internalBundleGraph = _BundleGraph2().default.fromAssetGraph(graph); // $FlowFixMe


    await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'before_bundle');
    let mutableBundleGraph = new (_MutableBundleGraph().default)(internalBundleGraph, this.options);
    let logger = new (_logger().PluginLogger)({
      origin: this.config.getBundlerName()
    });

    try {
      var _this$configs$get;

      await bundler.bundle({
        bundleGraph: mutableBundleGraph,
        config: (_this$configs$get = this.configs.get(plugin.name)) === null || _this$configs$get === void 0 ? void 0 : _this$configs$get.result,
        options: this.pluginOptions,
        logger
      });
    } catch (e) {
      throw new (_diagnostic().default)({
        diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
          origin: this.config.getBundlerName()
        })
      });
    } finally {
      // $FlowFixMe[incompatible-call]
      await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'after_bundle');
    }

    if (this.pluginOptions.mode === 'production') {
      try {
        var _this$configs$get2;

        await bundler.optimize({
          bundleGraph: mutableBundleGraph,
          config: (_this$configs$get2 = this.configs.get(plugin.name)) === null || _this$configs$get2 === void 0 ? void 0 : _this$configs$get2.result,
          options: this.pluginOptions,
          logger
        });
      } catch (e) {
        throw new (_diagnostic().default)({
          diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
            origin: this.config.getBundlerName()
          })
        });
      } finally {
        // $FlowFixMe[incompatible-call]
        await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'after_optimize');
      }
    } // Add dev dependency for the bundler. This must be done AFTER running it due to
    // the potential for lazy require() that aren't executed until the request runs.


    let devDepRequest = await (0, _DevDepRequest().createDevDependency)({
      specifier: name,
      resolveFrom
    }, plugin, this.previousDevDeps, this.options);
    await this.runDevDepRequest(devDepRequest);
    await this.nameBundles(internalBundleGraph);
    await (0, _applyRuntimes().default)({
      bundleGraph: internalBundleGraph,
      api: this.api,
      config: this.config,
      options: this.options,
      optionsRef: this.optionsRef,
      pluginOptions: this.pluginOptions,
      previousDevDeps: this.previousDevDeps,
      devDepRequests: this.devDepRequests,
      configs: this.configs
    }); // $FlowFixMe

    await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'after_runtimes'); // Store the serialized bundle graph in an in memory cache so that we avoid serializing it
    // many times to send to each worker, and in build mode, when writing to cache on shutdown.
    // Also, pre-compute the hashes for each bundle so they are only computed once and shared between workers.

    internalBundleGraph.getBundleGraphHash();
    (0, _serializer().cacheSerializedObject)(internalBundleGraph); // Recompute the cache key to account for new dev dependencies and invalidations.

    cacheKey = await this.getCacheKey(graph);
    this.api.storeResult(internalBundleGraph, cacheKey);
    return internalBundleGraph;
  }

  async getCacheKey(assetGraph) {
    let configs = [...this.configs].map(([pluginName, config]) => (0, _ConfigRequest().getConfigHash)(config, pluginName, this.options)).join('');
    let devDepRequests = [...this.devDepRequests.values()].map(d => d.hash).join('');
    let invalidations = await (0, _assetUtils().getInvalidationHash)(this.api.getInvalidations(), this.options);
    return (0, _hash().hashString)(_constants().PARCEL_VERSION + assetGraph.getHash() + configs + devDepRequests + invalidations);
  }

  async nameBundles(bundleGraph) {
    let namers = await this.config.getNamers();
    let bundles = bundleGraph.getBundles();
    await Promise.all(bundles.map(bundle => this.nameBundle(namers, bundle, bundleGraph))); // Add dev deps for namers, AFTER running them to account for lazy require().

    for (let namer of namers) {
      let devDepRequest = await (0, _DevDepRequest().createDevDependency)({
        specifier: namer.name,
        resolveFrom: namer.resolveFrom
      }, namer, this.previousDevDeps, this.options);
      await this.runDevDepRequest(devDepRequest);
    }

    let bundleNames = bundles.map(b => _path().default.join(b.target.distDir, (0, _nullthrows().default)(b.name)));

    _assert().default.deepEqual(bundleNames, (0, _utils().unique)(bundleNames), 'Bundles must have unique names');
  }

  async nameBundle(namers, internalBundle, internalBundleGraph) {
    let bundle = _Bundle().Bundle.get(internalBundle, internalBundleGraph, this.options);

    let bundleGraph = new (_BundleGraph().default)(internalBundleGraph, _Bundle().NamedBundle.get, this.options);

    for (let namer of namers) {
      try {
        var _this$configs$get3;

        let name = await namer.plugin.name({
          bundle,
          bundleGraph,
          config: (_this$configs$get3 = this.configs.get(namer.name)) === null || _this$configs$get3 === void 0 ? void 0 : _this$configs$get3.result,
          options: this.pluginOptions,
          logger: new (_logger().PluginLogger)({
            origin: namer.name
          })
        });

        if (name != null) {
          internalBundle.name = name;
          let {
            hashReference
          } = internalBundle;
          internalBundle.displayName = name.includes(hashReference) ? name.replace(hashReference, '[hash]') : name;
          return;
        }
      } catch (e) {
        throw new (_diagnostic().default)({
          diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
            origin: namer.name
          })
        });
      }
    }

    throw new Error('Unable to name bundle');
  }

}