"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

let parcelOptionsToPluginOptions = new WeakMap();

var _options = new WeakMap();

class PluginOptions {
  constructor(options) {
    _options.set(this, {
      writable: true,
      value: void 0
    });

    let existing = parcelOptionsToPluginOptions.get(options);

    if (existing != null) {
      return existing;
    }

    _classPrivateFieldSet(this, _options, options);

    parcelOptionsToPluginOptions.set(options, this);
    return this;
  }

  get instanceId() {
    return _classPrivateFieldGet(this, _options).instanceId;
  }

  get mode() {
    return _classPrivateFieldGet(this, _options).mode;
  }

  get env() {
    return _classPrivateFieldGet(this, _options).env;
  }

  get hmrOptions() {
    return _classPrivateFieldGet(this, _options).hmrOptions;
  }

  get serveOptions() {
    return _classPrivateFieldGet(this, _options).serveOptions;
  }

  get shouldBuildLazily() {
    return _classPrivateFieldGet(this, _options).shouldBuildLazily;
  }

  get shouldAutoInstall() {
    return _classPrivateFieldGet(this, _options).shouldAutoInstall;
  }

  get logLevel() {
    return _classPrivateFieldGet(this, _options).logLevel;
  }

  get entryRoot() {
    return _classPrivateFieldGet(this, _options).entryRoot;
  }

  get cacheDir() {
    // TODO: remove this. Probably bad if there are other types of caches.
    // Maybe expose the Cache object instead?
    return _classPrivateFieldGet(this, _options).cacheDir;
  }

  get projectRoot() {
    return _classPrivateFieldGet(this, _options).projectRoot;
  }

  get inputFS() {
    return _classPrivateFieldGet(this, _options).inputFS;
  }

  get outputFS() {
    return _classPrivateFieldGet(this, _options).outputFS;
  }

  get packageManager() {
    return _classPrivateFieldGet(this, _options).packageManager;
  }

  get detailedReport() {
    return _classPrivateFieldGet(this, _options).detailedReport;
  }

}

exports.default = PluginOptions;