"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _hash() {
  const data = require("@parcel/hash");

  _hash = function () {
    return data;
  };

  return data;
}

function _BundleGraph() {
  const data = _interopRequireDefault(require("./BundleGraph"));

  _BundleGraph = function () {
    return data;
  };

  return data;
}

function _BundleGraph2() {
  const data = _interopRequireDefault(require("../BundleGraph"));

  _BundleGraph2 = function () {
    return data;
  };

  return data;
}

function _Bundle() {
  const data = require("./Bundle");

  _Bundle = function () {
    return data;
  };

  return data;
}

function _Asset() {
  const data = require("./Asset");

  _Asset = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("../utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _Dependency() {
  const data = _interopRequireWildcard(require("./Dependency"));

  _Dependency = function () {
    return data;
  };

  return data;
}

function _Environment() {
  const data = require("./Environment");

  _Environment = function () {
    return data;
  };

  return data;
}

function _Target() {
  const data = require("./Target");

  _Target = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _types() {
  const data = require("../types");

  _types = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _graph = new WeakMap();

var _options = new WeakMap();

var _bundlePublicIds = new WeakMap();

class MutableBundleGraph extends _BundleGraph().default {
  /*: InternalBundleGraph */

  /*: ParcelOptions */
  constructor(graph, options) {
    super(graph, _Bundle().Bundle.get, options);

    _graph.set(this, {
      writable: true,
      value: void 0
    });

    _options.set(this, {
      writable: true,
      value: void 0
    });

    _bundlePublicIds.set(this, {
      writable: true,
      value:
      /*: Set<string> */
      new Set()
    });

    _classPrivateFieldSet(this, _graph, graph);

    _classPrivateFieldSet(this, _options, options);
  }

  addAssetGraphToBundle(asset, bundle, shouldSkipDependency) {
    _classPrivateFieldGet(this, _graph).addAssetGraphToBundle((0, _Asset().assetToAssetValue)(asset), (0, _Bundle().bundleToInternalBundle)(bundle), shouldSkipDependency ? d => shouldSkipDependency(new (_Dependency().default)(d)) : undefined);
  }

  addEntryToBundle(asset, bundle, shouldSkipDependency) {
    _classPrivateFieldGet(this, _graph).addEntryToBundle((0, _Asset().assetToAssetValue)(asset), (0, _Bundle().bundleToInternalBundle)(bundle), shouldSkipDependency ? d => shouldSkipDependency(new (_Dependency().default)(d)) : undefined);
  }

  createBundleGroup(dependency, target) {
    let dependencyNode = _classPrivateFieldGet(this, _graph)._graph.getNodeByContentKey(dependency.id);

    if (!dependencyNode) {
      throw new Error('Dependency not found');
    }

    (0, _assert().default)(dependencyNode.type === 'dependency');

    let resolved = _classPrivateFieldGet(this, _graph).getDependencyResolution((0, _Dependency().dependencyToInternalDependency)(dependency));

    if (!resolved) {
      throw new Error('Dependency did not resolve to an asset ' + dependency.id);
    }

    let bundleGroup = {
      target,
      entryAssetId: resolved.id
    };
    let bundleGroupKey = (0, _utils().getBundleGroupId)(bundleGroup);
    let bundleGroupNodeId = _classPrivateFieldGet(this, _graph)._graph.hasContentKey(bundleGroupKey) ? _classPrivateFieldGet(this, _graph)._graph.getNodeIdByContentKey(bundleGroupKey) : _classPrivateFieldGet(this, _graph)._graph.addNodeByContentKey(bundleGroupKey, {
      id: bundleGroupKey,
      type: 'bundle_group',
      value: bundleGroup
    });

    let dependencyNodeId = _classPrivateFieldGet(this, _graph)._graph.getNodeIdByContentKey(dependencyNode.id);

    let resolvedNodeId = _classPrivateFieldGet(this, _graph)._graph.getNodeIdByContentKey(resolved.id);

    let assetNodes = _classPrivateFieldGet(this, _graph)._graph.getNodeIdsConnectedFrom(dependencyNodeId);

    _classPrivateFieldGet(this, _graph)._graph.addEdge(dependencyNodeId, bundleGroupNodeId);

    _classPrivateFieldGet(this, _graph)._graph.replaceNodeIdsConnectedTo(bundleGroupNodeId, assetNodes);

    _classPrivateFieldGet(this, _graph)._graph.addEdge(dependencyNodeId, resolvedNodeId, 'references');

    _classPrivateFieldGet(this, _graph)._graph.removeEdge(dependencyNodeId, resolvedNodeId);

    if (dependency.isEntry) {
      _classPrivateFieldGet(this, _graph)._graph.addEdge((0, _nullthrows().default)(_classPrivateFieldGet(this, _graph)._graph.rootNodeId), bundleGroupNodeId, 'bundle');
    } else {
      let inboundBundleNodeIds = _classPrivateFieldGet(this, _graph)._graph.getNodeIdsConnectedTo(dependencyNodeId, 'contains');

      for (let inboundBundleNodeId of inboundBundleNodeIds) {
        var _classPrivateFieldGet2;

        (0, _assert().default)(((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _graph)._graph.getNode(inboundBundleNodeId)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.type) === 'bundle');

        _classPrivateFieldGet(this, _graph)._graph.addEdge(inboundBundleNodeId, bundleGroupNodeId, 'bundle');
      }
    }

    return bundleGroup;
  }

  removeBundleGroup(bundleGroup) {
    _classPrivateFieldGet(this, _graph).removeBundleGroup(bundleGroup);
  }

  internalizeAsyncDependency(bundle, dependency) {
    _classPrivateFieldGet(this, _graph).internalizeAsyncDependency((0, _Bundle().bundleToInternalBundle)(bundle), (0, _Dependency().dependencyToInternalDependency)(dependency));
  }

  createBundle(opts) {
    let entryAsset = opts.entryAsset ? (0, _Asset().assetToAssetValue)(opts.entryAsset) : null;
    let target = (0, _Target().targetToInternalTarget)(opts.target);
    let bundleId = (0, _hash().hashString)('bundle:' + (opts.entryAsset ? opts.entryAsset.id : opts.uniqueKey) + _path().default.relative(_classPrivateFieldGet(this, _options).projectRoot, target.distDir));

    let existing = _classPrivateFieldGet(this, _graph)._graph.getNodeByContentKey(bundleId);

    if (existing != null) {
      (0, _assert().default)(existing.type === 'bundle');
      return _Bundle().Bundle.get(existing.value, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options));
    }

    let publicId = (0, _utils().getPublicId)(bundleId, existing => _classPrivateFieldGet(this, _bundlePublicIds).has(existing));

    _classPrivateFieldGet(this, _bundlePublicIds).add(publicId);

    let isPlaceholder = false;

    if (entryAsset) {
      let entryAssetNode = _classPrivateFieldGet(this, _graph)._graph.getNodeByContentKey(entryAsset.id);

      (0, _assert().default)((entryAssetNode === null || entryAssetNode === void 0 ? void 0 : entryAssetNode.type) === 'asset', 'Entry asset does not exist');
      isPlaceholder = entryAssetNode.requested === false;
    }

    let bundleNode = {
      type: 'bundle',
      id: bundleId,
      value: {
        id: bundleId,
        hashReference: _constants().HASH_REF_PREFIX + bundleId,
        type: opts.entryAsset ? opts.entryAsset.type : opts.type,
        env: opts.env ? (0, _Environment().environmentToInternalEnvironment)(opts.env) : (0, _nullthrows().default)(entryAsset).env,
        entryAssetIds: entryAsset ? [entryAsset.id] : [],
        mainEntryId: entryAsset === null || entryAsset === void 0 ? void 0 : entryAsset.id,
        pipeline: opts.entryAsset ? opts.entryAsset.pipeline : opts.pipeline,
        needsStableName: opts.needsStableName,
        bundleBehavior: opts.bundleBehavior != null ? _types().BundleBehavior[opts.bundleBehavior] : null,
        isSplittable: opts.entryAsset ? opts.entryAsset.isBundleSplittable : opts.isSplittable,
        isPlaceholder,
        target,
        name: null,
        displayName: null,
        publicId
      }
    };

    let bundleNodeId = _classPrivateFieldGet(this, _graph)._graph.addNodeByContentKey(bundleId, bundleNode);

    if (opts.entryAsset) {
      _classPrivateFieldGet(this, _graph)._graph.addEdge(bundleNodeId, _classPrivateFieldGet(this, _graph)._graph.getNodeIdByContentKey(opts.entryAsset.id));
    }

    return _Bundle().Bundle.get(bundleNode.value, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options));
  }

  addBundleToBundleGroup(bundle, bundleGroup) {
    _classPrivateFieldGet(this, _graph).addBundleToBundleGroup((0, _Bundle().bundleToInternalBundle)(bundle), bundleGroup);
  }

  createAssetReference(dependency, asset, bundle) {
    return _classPrivateFieldGet(this, _graph).createAssetReference((0, _Dependency().dependencyToInternalDependency)(dependency), (0, _Asset().assetToAssetValue)(asset), (0, _Bundle().bundleToInternalBundle)(bundle));
  }

  createBundleReference(from, to) {
    return _classPrivateFieldGet(this, _graph).createBundleReference((0, _Bundle().bundleToInternalBundle)(from), (0, _Bundle().bundleToInternalBundle)(to));
  }

  getDependencyAssets(dependency) {
    return _classPrivateFieldGet(this, _graph).getDependencyAssets((0, _Dependency().dependencyToInternalDependency)(dependency)).map(asset => (0, _Asset().assetFromValue)(asset, _classPrivateFieldGet(this, _options)));
  }

  getBundleGroupsContainingBundle(bundle) {
    return _classPrivateFieldGet(this, _graph).getBundleGroupsContainingBundle((0, _Bundle().bundleToInternalBundle)(bundle));
  }

  getParentBundlesOfBundleGroup(bundleGroup) {
    return _classPrivateFieldGet(this, _graph).getParentBundlesOfBundleGroup(bundleGroup).map(bundle => _Bundle().Bundle.get(bundle, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options)));
  }

  getTotalSize(asset) {
    return _classPrivateFieldGet(this, _graph).getTotalSize((0, _Asset().assetToAssetValue)(asset));
  }

  isAssetReachableFromBundle(asset, bundle) {
    return _classPrivateFieldGet(this, _graph).isAssetReachableFromBundle((0, _Asset().assetToAssetValue)(asset), (0, _Bundle().bundleToInternalBundle)(bundle));
  }

  removeAssetGraphFromBundle(asset, bundle) {
    _classPrivateFieldGet(this, _graph).removeAssetGraphFromBundle((0, _Asset().assetToAssetValue)(asset), (0, _Bundle().bundleToInternalBundle)(bundle));
  }

}

exports.default = MutableBundleGraph;