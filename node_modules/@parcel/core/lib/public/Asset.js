"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assetToAssetValue = assetToAssetValue;
exports.mutableAssetToUncommittedAsset = mutableAssetToUncommittedAsset;
exports.assetFromValue = assetFromValue;
exports.MutableAsset = exports.Asset = void 0;

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _Environment() {
  const data = _interopRequireDefault(require("./Environment"));

  _Environment = function () {
    return data;
  };

  return data;
}

function _Dependency() {
  const data = _interopRequireDefault(require("./Dependency"));

  _Dependency = function () {
    return data;
  };

  return data;
}

function _Symbols() {
  const data = require("./Symbols");

  _Symbols = function () {
    return data;
  };

  return data;
}

function _UncommittedAsset() {
  const data = _interopRequireDefault(require("../UncommittedAsset"));

  _UncommittedAsset = function () {
    return data;
  };

  return data;
}

function _CommittedAsset() {
  const data = _interopRequireDefault(require("../CommittedAsset"));

  _CommittedAsset = function () {
    return data;
  };

  return data;
}

function _Environment2() {
  const data = require("../Environment");

  _Environment2 = function () {
    return data;
  };

  return data;
}

function _types() {
  const data = require("../types");

  _types = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

const inspect = Symbol.for('nodejs.util.inspect.custom');
const uncommittedAssetValueToAsset = new WeakMap();
const committedAssetValueToAsset = new WeakMap();
const assetValueToMutableAsset = new WeakMap();

const _assetToAssetValue = new WeakMap();

const _mutableAssetToUncommittedAsset = new WeakMap();

function assetToAssetValue(asset) {
  return (0, _nullthrows().default)(_assetToAssetValue.get(asset));
}

function mutableAssetToUncommittedAsset(mutableAsset) {
  return (0, _nullthrows().default)(_mutableAssetToUncommittedAsset.get(mutableAsset));
}

function assetFromValue(value, options) {
  return new Asset(value.committed ? new (_CommittedAsset().default)(value, options) : new (_UncommittedAsset().default)({
    value,
    options
  }));
}

var _asset = new WeakMap();

class BaseAsset {
  constructor(asset) {
    _asset.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _asset, asset);

    _assetToAssetValue.set(this, asset.value);
  } // $FlowFixMe


  [inspect]() {
    return `Asset(${this.filePath})`;
  }

  get id() {
    return _classPrivateFieldGet(this, _asset).value.id;
  }

  get type() {
    return _classPrivateFieldGet(this, _asset).value.type;
  }

  get env() {
    return new (_Environment().default)(_classPrivateFieldGet(this, _asset).value.env);
  }

  get fs() {
    return _classPrivateFieldGet(this, _asset).options.inputFS;
  }

  get filePath() {
    return _classPrivateFieldGet(this, _asset).value.filePath;
  }

  get query() {
    var _classPrivateFieldGet2;

    return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _asset).value.query) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : {};
  }

  get meta() {
    return _classPrivateFieldGet(this, _asset).value.meta;
  }

  get bundleBehavior() {
    let bundleBehavior = _classPrivateFieldGet(this, _asset).value.bundleBehavior;

    return bundleBehavior == null ? null : _types().BundleBehaviorNames[bundleBehavior];
  }

  get isBundleSplittable() {
    return _classPrivateFieldGet(this, _asset).value.isBundleSplittable;
  }

  get isSource() {
    return _classPrivateFieldGet(this, _asset).value.isSource;
  }

  get sideEffects() {
    return _classPrivateFieldGet(this, _asset).value.sideEffects;
  }

  get symbols() {
    return new (_Symbols().AssetSymbols)(_classPrivateFieldGet(this, _asset).value);
  }

  get uniqueKey() {
    return _classPrivateFieldGet(this, _asset).value.uniqueKey;
  }

  get astGenerator() {
    return _classPrivateFieldGet(this, _asset).value.astGenerator;
  }

  get pipeline() {
    return _classPrivateFieldGet(this, _asset).value.pipeline;
  }

  getDependencies() {
    return _classPrivateFieldGet(this, _asset).getDependencies().map(dep => new (_Dependency().default)(dep));
  }

  getCode() {
    return _classPrivateFieldGet(this, _asset).getCode();
  }

  getBuffer() {
    return _classPrivateFieldGet(this, _asset).getBuffer();
  }

  getStream() {
    return _classPrivateFieldGet(this, _asset).getStream();
  }

  getMap() {
    return _classPrivateFieldGet(this, _asset).getMap();
  }

  getAST() {
    return _classPrivateFieldGet(this, _asset).getAST();
  }

  getMapBuffer() {
    return _classPrivateFieldGet(this, _asset).getMapBuffer();
  }

}

var _asset2 = new WeakMap();

class Asset extends BaseAsset {
  constructor(asset) {
    let assetValueToAsset = asset.value.committed ? committedAssetValueToAsset : uncommittedAssetValueToAsset;
    let existing = assetValueToAsset.get(asset.value);

    if (existing != null) {
      return existing;
    }

    super(asset);

    _asset2.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _asset2, asset);

    assetValueToAsset.set(asset.value, this);
    return this;
  }

  get stats() {
    return _classPrivateFieldGet(this, _asset2).value.stats;
  }

}

exports.Asset = Asset;

var _asset3 = new WeakMap();

class MutableAsset extends BaseAsset {
  constructor(asset) {
    let existing = assetValueToMutableAsset.get(asset.value);

    if (existing != null) {
      return existing;
    }

    super(asset);

    _asset3.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _asset3, asset);

    assetValueToMutableAsset.set(asset.value, this);

    _mutableAssetToUncommittedAsset.set(this, asset);

    return this;
  }

  setMap(map) {
    _classPrivateFieldGet(this, _asset3).setMap(map);
  }

  get type() {
    return _classPrivateFieldGet(this, _asset3).value.type;
  }

  set type(type) {
    if (type !== _classPrivateFieldGet(this, _asset3).value.type) {
      _classPrivateFieldGet(this, _asset3).value.type = type;

      _classPrivateFieldGet(this, _asset3).updateId();
    }
  }

  get bundleBehavior() {
    let bundleBehavior = _classPrivateFieldGet(this, _asset3).value.bundleBehavior;

    return bundleBehavior == null ? null : _types().BundleBehaviorNames[bundleBehavior];
  }

  set bundleBehavior(bundleBehavior) {
    _classPrivateFieldGet(this, _asset3).value.bundleBehavior = bundleBehavior ? _types().BundleBehavior[bundleBehavior] : null;
  }

  get isBundleSplittable() {
    return _classPrivateFieldGet(this, _asset3).value.isBundleSplittable;
  }

  set isBundleSplittable(isBundleSplittable) {
    _classPrivateFieldGet(this, _asset3).value.isBundleSplittable = isBundleSplittable;
  }

  get sideEffects() {
    return _classPrivateFieldGet(this, _asset3).value.sideEffects;
  }

  set sideEffects(sideEffects) {
    _classPrivateFieldGet(this, _asset3).value.sideEffects = sideEffects;
  }

  get symbols() {
    return new (_Symbols().MutableAssetSymbols)(_classPrivateFieldGet(this, _asset3).value);
  }

  addDependency(dep) {
    return _classPrivateFieldGet(this, _asset3).addDependency(dep);
  }

  invalidateOnFileChange(filePath) {
    _classPrivateFieldGet(this, _asset3).invalidateOnFileChange(filePath);
  }

  invalidateOnFileCreate(invalidation) {
    _classPrivateFieldGet(this, _asset3).invalidateOnFileCreate(invalidation);
  }

  invalidateOnEnvChange(env) {
    _classPrivateFieldGet(this, _asset3).invalidateOnEnvChange(env);
  }

  isASTDirty() {
    return _classPrivateFieldGet(this, _asset3).isASTDirty;
  }

  setBuffer(buffer) {
    _classPrivateFieldGet(this, _asset3).setBuffer(buffer);
  }

  setCode(code) {
    _classPrivateFieldGet(this, _asset3).setCode(code);
  }

  setStream(stream) {
    _classPrivateFieldGet(this, _asset3).setStream(stream);
  }

  setAST(ast) {
    return _classPrivateFieldGet(this, _asset3).setAST(ast);
  }

  addURLDependency(url, opts) {
    return this.addDependency({
      specifier: url,
      specifierType: 'url',
      priority: 'lazy',
      ...opts
    });
  }

  setEnvironment(env) {
    _classPrivateFieldGet(this, _asset3).value.env = (0, _Environment2().createEnvironment)(env);

    _classPrivateFieldGet(this, _asset3).updateId();
  }

}

exports.MutableAsset = MutableAsset;