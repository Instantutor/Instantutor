"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.targetToInternalTarget = targetToInternalTarget;
exports.default = void 0;

function _Environment() {
  const data = _interopRequireDefault(require("./Environment"));

  _Environment = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

const internalTargetToTarget = new WeakMap();

const _targetToInternalTarget = new WeakMap();

function targetToInternalTarget(target) {
  return (0, _nullthrows().default)(_targetToInternalTarget.get(target));
}

var _target = new WeakMap();

class Target {
  constructor(target) {
    _target.set(this, {
      writable: true,
      value: void 0
    });

    let existing = internalTargetToTarget.get(target);

    if (existing != null) {
      return existing;
    }

    _classPrivateFieldSet(this, _target, target);

    _targetToInternalTarget.set(this, target);

    internalTargetToTarget.set(target, this);
    return this;
  }

  get distEntry() {
    return _classPrivateFieldGet(this, _target).distEntry;
  }

  get distDir() {
    return _classPrivateFieldGet(this, _target).distDir;
  }

  get env() {
    return new (_Environment().default)(_classPrivateFieldGet(this, _target).env);
  }

  get name() {
    return _classPrivateFieldGet(this, _target).name;
  }

  get publicUrl() {
    return _classPrivateFieldGet(this, _target).publicUrl;
  }

  get loc() {
    return _classPrivateFieldGet(this, _target).loc;
  }

}

exports.default = Target;