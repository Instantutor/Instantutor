"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bundleToInternalBundle = bundleToInternalBundle;
exports.bundleToInternalBundleGraph = bundleToInternalBundleGraph;
exports.PackagedBundle = exports.NamedBundle = exports.Bundle = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _Asset() {
  const data = require("./Asset");

  _Asset = function () {
    return data;
  };

  return data;
}

function _Graph() {
  const data = require("../Graph");

  _Graph = function () {
    return data;
  };

  return data;
}

function _Environment() {
  const data = _interopRequireDefault(require("./Environment"));

  _Environment = function () {
    return data;
  };

  return data;
}

function _Dependency() {
  const data = _interopRequireWildcard(require("./Dependency"));

  _Dependency = function () {
    return data;
  };

  return data;
}

function _Target() {
  const data = _interopRequireDefault(require("./Target"));

  _Target = function () {
    return data;
  };

  return data;
}

function _types() {
  const data = require("../types");

  _types = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

const internalBundleToBundle = new (_utils().DefaultWeakMap)(() => new (_utils().DefaultWeakMap)(() => new WeakMap()));
const internalBundleToNamedBundle = new (_utils().DefaultWeakMap)(() => new (_utils().DefaultWeakMap)(() => new WeakMap()));
const internalBundleToPackagedBundle = new (_utils().DefaultWeakMap)(() => new (_utils().DefaultWeakMap)(() => new WeakMap())); // Friendly access for other modules within this package that need access
// to the internal bundle.

const _bundleToInternalBundle = new WeakMap();

function bundleToInternalBundle(bundle) {
  return (0, _nullthrows().default)(_bundleToInternalBundle.get(bundle));
}

const _bundleToInternalBundleGraph = new WeakMap();

function bundleToInternalBundleGraph(bundle) {
  return (0, _nullthrows().default)(_bundleToInternalBundleGraph.get(bundle));
} // Require this private object to be present when invoking these constructors,
// preventing others from using them. They should use the static `get` method.


let _private = {};

var _bundle = new WeakMap();

var _bundleGraph = new WeakMap();

var _options = new WeakMap();

class Bundle {
  /*: InternalBundle */

  /*: BundleGraph */
  constructor(sentinel, bundle, bundleGraph, options) {
    _bundle.set(this, {
      writable: true,
      value: void 0
    });

    _bundleGraph.set(this, {
      writable: true,
      value: void 0
    });

    _options.set(this, {
      writable: true,
      value: void 0
    });

    if (sentinel !== _private) {
      throw new Error('Unexpected public usage');
    }

    _classPrivateFieldSet(this, _bundle, bundle);

    _classPrivateFieldSet(this, _bundleGraph, bundleGraph);

    _classPrivateFieldSet(this, _options, options);
  }

  static get(internalBundle, bundleGraph, options) {
    let existingMap = internalBundleToBundle.get(options).get(bundleGraph);
    let existing = existingMap.get(internalBundle);

    if (existing != null) {
      return existing;
    }

    let bundle = new Bundle(_private, internalBundle, bundleGraph, options);

    _bundleToInternalBundle.set(bundle, internalBundle);

    _bundleToInternalBundleGraph.set(bundle, bundleGraph);

    existingMap.set(internalBundle, bundle);
    return bundle;
  }

  get id() {
    return _classPrivateFieldGet(this, _bundle).id;
  }

  get hashReference() {
    return _classPrivateFieldGet(this, _bundle).hashReference;
  }

  get type() {
    return _classPrivateFieldGet(this, _bundle).type;
  }

  get env() {
    return new (_Environment().default)(_classPrivateFieldGet(this, _bundle).env);
  }

  get needsStableName() {
    return _classPrivateFieldGet(this, _bundle).needsStableName;
  }

  get bundleBehavior() {
    let bundleBehavior = _classPrivateFieldGet(this, _bundle).bundleBehavior;

    return bundleBehavior != null ? _types().BundleBehaviorNames[bundleBehavior] : null;
  }

  get isSplittable() {
    return _classPrivateFieldGet(this, _bundle).isSplittable;
  }

  get target() {
    return new (_Target().default)(_classPrivateFieldGet(this, _bundle).target);
  }

  hasAsset(asset) {
    return _classPrivateFieldGet(this, _bundleGraph).bundleHasAsset(_classPrivateFieldGet(this, _bundle), (0, _Asset().assetToAssetValue)(asset));
  }

  hasDependency(dep) {
    return _classPrivateFieldGet(this, _bundleGraph).bundleHasDependency(_classPrivateFieldGet(this, _bundle), (0, _Dependency().dependencyToInternalDependency)(dep));
  }

  getEntryAssets() {
    return _classPrivateFieldGet(this, _bundle).entryAssetIds.map(id => {
      let assetNode = _classPrivateFieldGet(this, _bundleGraph)._graph.getNodeByContentKey(id);

      (0, _assert().default)(assetNode != null && assetNode.type === 'asset');
      return (0, _Asset().assetFromValue)(assetNode.value, _classPrivateFieldGet(this, _options));
    });
  }

  getMainEntry() {
    if (_classPrivateFieldGet(this, _bundle).mainEntryId != null) {
      let assetNode = _classPrivateFieldGet(this, _bundleGraph)._graph.getNodeByContentKey(_classPrivateFieldGet(this, _bundle).mainEntryId);

      (0, _assert().default)(assetNode != null && assetNode.type === 'asset');
      return (0, _Asset().assetFromValue)(assetNode.value, _classPrivateFieldGet(this, _options));
    }
  }

  traverse(visit) {
    return _classPrivateFieldGet(this, _bundleGraph).traverseBundle(_classPrivateFieldGet(this, _bundle), (0, _Graph().mapVisitor)(node => {
      if (node.type === 'asset') {
        return {
          type: 'asset',
          value: (0, _Asset().assetFromValue)(node.value, _classPrivateFieldGet(this, _options))
        };
      } else if (node.type === 'dependency') {
        return {
          type: 'dependency',
          value: new (_Dependency().default)(node.value)
        };
      }
    }, visit));
  }

  traverseAssets(visit) {
    return _classPrivateFieldGet(this, _bundleGraph).traverseAssets(_classPrivateFieldGet(this, _bundle), (0, _Graph().mapVisitor)(asset => (0, _Asset().assetFromValue)(asset, _classPrivateFieldGet(this, _options)), visit));
  }

}

exports.Bundle = Bundle;

var _bundle2 = new WeakMap();

var _bundleGraph2 = new WeakMap();

class NamedBundle extends Bundle {
  /*: InternalBundle */
  constructor(sentinel, bundle, bundleGraph, options) {
    super(sentinel, bundle, bundleGraph, options);

    _bundle2.set(this, {
      writable: true,
      value: void 0
    });

    _bundleGraph2.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _bundle2, bundle); // Repeating for flow


    _classPrivateFieldSet(this, _bundleGraph2, bundleGraph); // Repeating for flow

  }

  static get(internalBundle, bundleGraph, options) {
    let existingMap = internalBundleToNamedBundle.get(options).get(bundleGraph);
    let existing = existingMap.get(internalBundle);

    if (existing != null) {
      return existing;
    }

    let namedBundle = new NamedBundle(_private, internalBundle, bundleGraph, options);

    _bundleToInternalBundle.set(namedBundle, internalBundle);

    _bundleToInternalBundleGraph.set(namedBundle, bundleGraph);

    existingMap.set(internalBundle, namedBundle);
    return namedBundle;
  }

  get name() {
    return (0, _nullthrows().default)(_classPrivateFieldGet(this, _bundle2).name);
  }

  get displayName() {
    return (0, _nullthrows().default)(_classPrivateFieldGet(this, _bundle2).displayName);
  }

  get publicId() {
    return (0, _nullthrows().default)(_classPrivateFieldGet(this, _bundle2).publicId);
  }

}

exports.NamedBundle = NamedBundle;

var _bundle3 = new WeakMap();

var _bundleGraph3 = new WeakMap();

var _bundleInfo = new WeakMap();

class PackagedBundle extends NamedBundle {
  /*: InternalBundle */

  /*: BundleGraph */
  constructor(sentinel, bundle, bundleGraph, options) {
    super(sentinel, bundle, bundleGraph, options);

    _bundle3.set(this, {
      writable: true,
      value: void 0
    });

    _bundleGraph3.set(this, {
      writable: true,
      value: void 0
    });

    _bundleInfo.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _bundle3, bundle); // Repeating for flow


    _classPrivateFieldSet(this, _bundleGraph3, bundleGraph); // Repeating for flow

  }

  static get(internalBundle, bundleGraph, options) {
    let existingMap = internalBundleToPackagedBundle.get(options).get(bundleGraph);
    let existing = existingMap.get(internalBundle);

    if (existing != null) {
      return existing;
    }

    let packagedBundle = new PackagedBundle(_private, internalBundle, bundleGraph, options);

    _bundleToInternalBundle.set(packagedBundle, internalBundle);

    _bundleToInternalBundleGraph.set(packagedBundle, bundleGraph);

    existingMap.set(internalBundle, packagedBundle);
    return packagedBundle;
  }

  static getWithInfo(internalBundle, bundleGraph, options, bundleInfo) {
    let packagedBundle = PackagedBundle.get(internalBundle, bundleGraph, options);

    _classPrivateFieldSet(packagedBundle, _bundleInfo, bundleInfo);

    return packagedBundle;
  }

  get filePath() {
    return (0, _nullthrows().default)(_classPrivateFieldGet(this, _bundleInfo)).filePath;
  }

  get stats() {
    return (0, _nullthrows().default)(_classPrivateFieldGet(this, _bundleInfo)).stats;
  }

}

exports.PackagedBundle = PackagedBundle;