"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _htmlnano() {
  const data = _interopRequireDefault(require("htmlnano"));

  _htmlnano = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _posthtml() {
  const data = _interopRequireDefault(require("posthtml"));

  _posthtml = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new (_plugin().Optimizer)({
  async optimize({
    bundle,
    contents,
    map,
    options
  }) {
    if (!bundle.env.shouldOptimize) {
      return {
        contents,
        map
      };
    }

    if (typeof contents !== 'string') {
      throw new Error('HTMLNanoOptimizer: Only string contents are currently supported');
    }

    let userConfig = await (0, _utils().loadConfig)(options.inputFS, _path().default.join(options.entryRoot, 'index.html'), ['.htmlnanorc', '.htmlnanorc.js'], options.projectRoot);
    const htmlNanoConfig = {
      minifyJs: false,
      ...(userConfig === null || userConfig === void 0 ? void 0 : userConfig.config)
    };
    return {
      contents: (await (0, _posthtml().default)([(0, _htmlnano().default)(htmlNanoConfig)]).process(contents)).html
    };
  }

});

exports.default = _default;