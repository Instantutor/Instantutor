"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _ws() {
  const data = _interopRequireDefault(require("ws"));

  _ws = function () {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const FS_CONCURRENCY = 64;

class HMRServer {
  constructor(options) {
    _defineProperty(this, "wss", void 0);

    _defineProperty(this, "unresolvedError", null);

    _defineProperty(this, "options", void 0);

    this.options = options;
  }

  start() {
    this.wss = new (_ws().default.Server)(this.options.devServer ? {
      server: this.options.devServer
    } : {
      port: this.options.port
    });
    this.wss.on('connection', ws => {
      if (this.unresolvedError) {
        ws.send(JSON.stringify(this.unresolvedError));
      }
    }); // $FlowFixMe[incompatible-exact]

    this.wss.on('error', err => this.handleSocketError(err));
    let address = this.wss.address();
    (0, _assert().default)(typeof address === 'object' && address != null);
    return address.port;
  }

  stop() {
    this.wss.close();
  }

  async emitError(options, diagnostics) {
    let renderedDiagnostics = await Promise.all(diagnostics.map(d => (0, _utils().prettyDiagnostic)(d, options))); // store the most recent error so we can notify new connections
    // and so we can broadcast when the error is resolved

    this.unresolvedError = {
      type: 'error',
      diagnostics: {
        ansi: renderedDiagnostics,
        html: renderedDiagnostics.map(d => {
          return {
            message: (0, _utils().ansiHtml)(d.message),
            stack: (0, _utils().ansiHtml)(d.stack),
            codeframe: (0, _utils().ansiHtml)(d.codeframe),
            hints: d.hints.map(hint => (0, _utils().ansiHtml)(hint))
          };
        })
      }
    };
    this.broadcast(this.unresolvedError);
  }

  async emitUpdate(event) {
    this.unresolvedError = null;
    let changedAssets = Array.from(event.changedAssets.values());
    if (changedAssets.length === 0) return;
    let queue = new (_utils().PromiseQueue)({
      maxConcurrent: FS_CONCURRENCY
    });

    for (let asset of changedAssets) {
      queue.add(async () => {
        let dependencies = event.bundleGraph.getDependencies(asset);
        let depsByBundle = {};

        for (let bundle of event.bundleGraph.findBundlesWithAsset(asset)) {
          let deps = {};

          for (let dep of dependencies) {
            let resolved = event.bundleGraph.getDependencyResolution(dep, bundle);

            if (resolved) {
              deps[dep.specifier] = event.bundleGraph.getAssetPublicId(resolved);
            }
          }

          depsByBundle[bundle.id] = deps;
        }

        return {
          id: event.bundleGraph.getAssetPublicId(asset),
          type: asset.type,
          output: await asset.getCode(),
          envHash: asset.env.id,
          depsByBundle
        };
      });
    }

    let assets = await queue.run();
    this.broadcast({
      type: 'update',
      assets: assets
    });
  }

  handleSocketError(err) {
    if (err.code === 'ECONNRESET') {
      // This gets triggered on page refresh, ignore this
      return;
    }

    this.options.logger.warn({
      origin: '@parcel/reporter-dev-server',
      message: `[${err.code}]: ${err.message}`,
      stack: err.stack
    });
  }

  broadcast(msg) {
    const json = JSON.stringify(msg);

    for (let ws of this.wss.clients) {
      ws.send(json);
    }
  }

}

exports.default = HMRServer;